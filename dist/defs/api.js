/**
 * Welcome to ng2tree
 */
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"api.js","sourceRoot":"","sources":["../../lib/defs/api.ts"],"names":[],"mappings":"AAAA;;GAEG","sourcesContent":["/**\r\n * Welcome to ng2tree\r\n */\r\n\r\nexport interface IAllowDropFn {\r\n  (element: any, to: {parent: ITreeNode, index: number}, $event?: any): boolean;\r\n}\r\n\r\nexport interface INodeHeightFn {\r\n  (node: ITreeNode): number;\r\n}\r\n\r\nexport interface IAllowDragFn {\r\n  (node: ITreeNode): boolean;\r\n}\r\n/**\r\n* This is the interface of the options input of the tree.\r\n* See docs for more detailed explanations\r\n*/\r\nexport interface ITreeOptions {\r\n   /**\r\n    * Override children field. Default: 'children'\r\n    */\r\n   childrenField?: string;\r\n   /**\r\n    * Override display field. Default: 'name'\r\n    */\r\n   displayField?: string;\r\n   /**\r\n    * Override id field. Default: 'id'\r\n    */\r\n   idField?: string;\r\n   /**\r\n    * Override isExpanded field. Default: 'isExpanded'\r\n    */\r\n   isExpandedField?: string;\r\n   /**\r\n    * Override isHidden field. Default: 'isHidden'\r\n    */\r\n   isHiddenField?: string;\r\n   /**\r\n    * Supply function for getting fields asynchronously. Should return a Promise\r\n    */\r\n   getChildren?: (node: ITreeNode) => any;\r\n   /**\r\n    * Change the default mouse and key actions on the tree\r\n    */\r\n   actionMapping?: any;\r\n   /**\r\n    * Allow dragging tree nodes. Default: false\r\n    */\r\n   allowDrag?: boolean | IAllowDragFn;\r\n   /**\r\n    * Allow drop on the tree.\r\n    * Either boolean value, or a function that takes the dragged element and drop location (parent, index)\r\n    * and returns a boolean value.\r\n    * Will be called when dragging over the nodes or between nodes, and allow to prevent the drop style\r\n    * Default: true\r\n    */\r\n   allowDrop?: boolean | IAllowDropFn;\r\n   /**\r\n   * Specify padding per node instead of children padding (to allow full row select for example)\r\n   */\r\n   levelPadding?: number;\r\n   /**\r\n    * Supply function for getting a custom class for the node component\r\n    */\r\n   nodeClass?: (node: ITreeNode) => string;\r\n   /**\r\n    * Boolean whether virtual scroll should be used.\r\n    * Increases performance for large trees\r\n    * Default is false\r\n    */\r\n   useVirtualScroll?: boolean;\r\n   /**\r\n    * Supply a function for getting each node's height - for virtual scrolling\r\n    * The tree model will account for the extra pixels for the drop slots\r\n    * Default is 22\r\n    */\r\n   nodeHeight?: number | INodeHeightFn;\r\n   /**\r\n    * Supply a function for getting the height of the dropslow that's located\r\n    * between nodes. This is used for height calculations for virtual scrolling\r\n    * Default is 2\r\n    */\r\n   dropSlotHeight?: number;\r\n   /**\r\n    * Boolean whether or not to animate expand / collapse of nodes.\r\n    * Default is false\r\n    */\r\n   animateExpand?: boolean;\r\n   /**\r\n    * Speed of expand animation (described in pixels per 17 ms).\r\n    * Default is 30\r\n    */\r\n   animateSpeed?: number;\r\n   /**\r\n    * Increase of expand animation speed (described in multiply per 17 ms).\r\n    * Default is 1.2\r\n    */\r\n   animateAcceleration?: number;\r\n }\r\n\r\n/**\r\n * This is the interface of a single Tree Node\r\n */\r\nexport interface ITreeNode {\r\n  // properties\r\n  /**\r\n   * Parent node\r\n   */\r\n  parent: ITreeNode;\r\n  /**\r\n   * The value of the node's field that is used for displaying its content.\r\n   * By default 'name', unless stated otherwise in the options\r\n   */\r\n  displayField: string;\r\n  /**\r\n   * The children of the node.\r\n   * By default is determined by 'node.data.children', unless stated otherwise in the options\r\n   */\r\n  children: ITreeNode[];\r\n  /**\r\n   * Pointer to the original data.\r\n   */\r\n  data: any;\r\n  /**\r\n   * Pointer to the ElementRef of the TreeNodeComponent that's displaying this node\r\n   */\r\n  elementRef: any;\r\n  /**\r\n   * Level in the tree (starts from 1).\r\n   */\r\n  level: number;\r\n  /**\r\n   * Path in the tree: Array of IDs.\r\n   */\r\n  path: string[];\r\n  /**\r\n   * index of the node inside its parent's children\r\n   */\r\n  index: number;\r\n  /**\r\n   * A unique key of this node among its siblings.\r\n   * By default it's the 'id' of the original node, unless stated otherwise in options.idField\r\n   */\r\n  id: any;\r\n\r\n  // helpers\r\n  isExpanded: boolean;\r\n  isActive: boolean;\r\n  isFocused: boolean;\r\n  isCollapsed: boolean;\r\n  isLeaf: boolean;\r\n  hasChildren: boolean;\r\n  isRoot: boolean;\r\n\r\n  // traversing\r\n  /**\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns next sibling (or null)\r\n   */\r\n  findNextSibling(skipHidden): ITreeNode;\r\n  /**\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns previous sibling (or null)\r\n   */\r\n  findPreviousSibling(skipHidden): ITreeNode;\r\n  /**\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns first child (or null)\r\n   */\r\n  getFirstChild(skipHidden): ITreeNode;\r\n  /**\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns last child (or null)\r\n   */\r\n  getLastChild(skipHidden): ITreeNode;\r\n  /**\r\n   * Finds the visually next node in the tree.\r\n   * @param goInside whether to look for children or just siblings\r\n   * @returns next node.\r\n   */\r\n  findNextNode(goInside: boolean): ITreeNode;\r\n  /**\r\n   * Finds the visually previous node in the tree.\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns previous node.\r\n   */\r\n  findPreviousNode(skipHidden): ITreeNode;\r\n\r\n  /**\r\n   * @returns      true if this node is a descendant of the parameter node\r\n   */\r\n  isDescendantOf(node: ITreeNode): boolean;\r\n\r\n  /**\r\n   * @returns      in case levelPadding option is supplied, returns the current node's padding\r\n   */\r\n  getNodePadding(): string;\r\n\r\n  /**\r\n   * @returns      in case nodeClass option is supplied, returns the current node's class\r\n   */\r\n  getClass(): string;\r\n\r\n  // actions\r\n  /**\r\n   * Expands / Collapses the node\r\n   */\r\n  toggleExpanded();\r\n  /**\r\n   * Expands the node\r\n   */\r\n  expand();\r\n  /**\r\n   * Collapses the node\r\n   */\r\n  collapse();\r\n  /**\r\n   * Expands all ancestors of the node\r\n   */\r\n  ensureVisible();\r\n  /**\r\n   * Activates / Deactivates the node (selects / deselects)\r\n   */\r\n  toggleActivated(multi);\r\n  /**\r\n   * Focus on the node\r\n   */\r\n  focus();\r\n  /**\r\n   * Blur (unfocus) the node\r\n   */\r\n  blur();\r\n  /**\r\n   * Hides the node\r\n   */\r\n  hide();\r\n  /**\r\n   * Makes the node visible\r\n   */\r\n  show();\r\n  /**\r\n   * @param value  if true makes the node hidden, otherwise visible\r\n   */\r\n  setIsHidden(value: boolean);\r\n  /**\r\n   * Scroll the screen to make the node visible\r\n   */\r\n  scrollIntoView();\r\n  /**\r\n   * Fire an event to the renderer of the tree (if it was registered)\r\n   */\r\n  fireEvent(event: any);\r\n  /**\r\n   * Invokes a method for every node under this one - depth first\r\n   * @param fn  a function that receives the node\r\n   */\r\n  doForAll(fn: (node: ITreeNode) => any);\r\n  /**\r\n   * expand all nodes under this one\r\n   */\r\n  expandAll();\r\n  /**\r\n   * collapse all nodes under this one\r\n   */\r\n  collapseAll();\r\n}\r\n\r\n/**\r\n * This is the interface of the TreeModel\r\n */\r\nexport interface ITreeModel {\r\n  // properties\r\n  /**\r\n   * All root nodes\r\n   */\r\n  roots: ITreeNode[];\r\n  /**\r\n   * Current focused node\r\n   */\r\n  focusedNode: ITreeNode;\r\n  /**\r\n   * Options that were passed to the tree component\r\n   */\r\n  options: ITreeOptions;\r\n\r\n  /**\r\n   * Is the tree currently focused\r\n   */\r\n  isFocused: boolean;\r\n  /**\r\n   * @returns Current active (selected) nodes\r\n   */\r\n  activeNodes: ITreeNode[];\r\n  /**\r\n   * @returns Current expanded nodes\r\n   */\r\n  expandedNodes: ITreeNode[];\r\n\r\n  // helpers\r\n  /**\r\n   * @returns Current active (selected) node. If multiple nodes are active - returns the first one.\r\n   */\r\n  getActiveNode(): ITreeNode;\r\n  /**\r\n   * @returns Current focused node (either hovered or traversed with keys)\r\n   */\r\n  getFocusedNode(): ITreeNode;\r\n  /**\r\n   * Set focus on a node\r\n   * @param value  true or false - whether to set focus or blur.\r\n   */\r\n  setFocusedNode(node: ITreeNode);\r\n  /**\r\n   * @param skipHidden  true or false - whether to skip hidden nodes\r\n   * @returns      first root of the tree\r\n   */\r\n  getFirstRoot(skipHidden?: boolean): ITreeNode;\r\n  /**\r\n   * @param skipHidden  true or false - whether to skip hidden nodes\r\n   * @returns      last root of the tree\r\n   */\r\n  getLastRoot(skipHidden?: boolean): ITreeNode;\r\n  /**\r\n   * @returns      true if the tree is empty\r\n   */\r\n  isEmptyTree(): boolean;\r\n  /**\r\n   * @returns All root nodes that pass the current filter\r\n   */\r\n  getVisibleRoots(): ITreeNode[];\r\n  /**\r\n   * @param     path  array of node IDs to be traversed respectively\r\n   * @param     statrNode  optional. Which node to start traversing from\r\n   * @returns   The node, if found - null otherwise\r\n   */\r\n  getNodeByPath(path: any[], startNode?: ITreeNode): ITreeNode;\r\n  /**\r\n   * @param     id  node ID to find\r\n   * @returns   The node, if found - null otherwise\r\n   */\r\n  getNodeById(id: any): ITreeNode;\r\n  /**\r\n   * @param     predicate - either an object or a function, used as a test condition on all nodes.\r\n   *            Could be every predicate that's supported by lodash's `find` method\r\n   * @param     statrNode  optional. Which node to start traversing from\r\n   * @returns   First node that matches the predicate, if found - null otherwise\r\n   */\r\n  getNodeBy(predicate: any, startNode?: ITreeNode): ITreeNode;\r\n\r\n  // actions\r\n  /**\r\n   * Focuses or blurs the tree\r\n   * @param value  true or false - whether to set focus or blur.\r\n   */\r\n  setFocus(value: boolean);\r\n  /**\r\n   * Focuses on the next node in the tree (same as down arrow)\r\n   */\r\n  focusNextNode();\r\n  /**\r\n   * Focuses on the previous node in the tree (same as up arrow)\r\n   */\r\n  focusPreviousNode();\r\n  /**\r\n   * Focuses on the inner child of the current focused node (same as right arrow on an expanded node)\r\n   */\r\n  focusDrillDown();\r\n  /**\r\n   * Focuses on the parent of the current focused node (same as left arrow on a collapsed node)\r\n   */\r\n  focusDrillUp();\r\n  /**\r\n   * Marks isHidden field in all nodes recursively according to the filter param.\r\n   * If a node is marked visible, all of its ancestors will be marked visible as well.\r\n   * @param filter  either a string or a function.\r\n   *   In case it's a string, it will be searched case insensitively in the node's display attribute\r\n   *   In case it's a function, it will be passed the node, and should return true if the node should be visible, false otherwise\r\n   * @param autoShow  if true, make sure all nodes that passed the filter are visible\r\n   */\r\n  filterNodes(filter, autoShow?: boolean);\r\n  /**\r\n   * Marks all nodes isHidden = false\r\n   */\r\n  clearFilter();\r\n  /**\r\n   * moves a node from one location in the tree to another\r\n   * @param location  has a from and a to attributes, each has a node and index attributes.\r\n     The combination of node + index tells which node needs to be moved, and to where\r\n   */\r\n  moveNode(node: ITreeNode, to: {node: ITreeNode, index: number});\r\n  /**\r\n   * Invokes a method for every node of the tree - depth first\r\n   * @param fn  a function that receives the node\r\n   */\r\n  doForAll(fn: (node: ITreeNode) => any);\r\n  /**\r\n   * expand all nodes\r\n   */\r\n  expandAll();\r\n  /**\r\n   * collapse all nodes\r\n   */\r\n  collapseAll();\r\n}\r\n\r\n/**\r\n * This is the interface of the TreeNodeDrag service\r\n */\r\nexport interface ITreeNodeDrag {\r\n  /**\r\n   * Gets the current dragged node. Useful for overriding the drop action.\r\n   * @param node  The parent node of the current dragged node\r\n   * @param index  The index inside parent's children, of the current dragged node\r\n   */\r\n  getDragNode(): { node: ITreeNode, index: number };\r\n}\r\n"]}